cmake_minimum_required (VERSION 3.1)
project (sctx C CXX)

if (POLICY CMP0025)
  cmake_policy(SET CMP0025 NEW)
endif ()

set (CMAKE_CXX_STANDARD 11)
set( CMAKE_EXPORT_COMPILE_COMMANDS ON )

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -Wextra")
set(HDF5_USE_STATIC_LIBRARIES ON)

find_package( HDF5 REQUIRED COMPONENTS C CXX HL)
INCLUDE_DIRECTORIES(SYSTEM ${HDF5_INCLUDE_DIRS})

MESSAGE( "HDF5 LIBRARY: ${HDF5_LIBRARIES}" )
MESSAGE( "HDF5 LIBRARY CXX: ${HDF5_CXX_LIBRARIES}" )
MESSAGE( "HDF5 INCLUDE: ${HDF5_INCLUDE_DIRS}" )

MESSAGE( "BUILD TYPE: ${CMAKE_BUILD_TYPE}" )
MESSAGE( "INSTALL PREFIX: ${CMAKE_INSTALL_PREFIX}" )

SET( EXTERNAL_DIR "${PROJECT_SOURCE_DIR}/external" )

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include/)
INCLUDE_DIRECTORIES(${EXTERNAL_DIR})

include(FetchContent)

FetchContent_Declare(
  scsnv
  GIT_REPOSITORY "https://github.com/GWW/scsnv"
)

FetchContent_GetProperties(scsnv)
if(NOT scsnv_POPULATED)
    FetchContent_Populate(scsnv)
    add_subdirectory(${scsnv_SOURCE_DIR} ${scsnv_BINARY_DIR})
endif()

INCLUDE_DIRECTORIES(${scsnv_SOURCE_DIR}/include/)
INCLUDE_DIRECTORIES(${scsnv_SOURCE_DIR}/src/bwa/)
INCLUDE_DIRECTORIES(${scsnv_SOURCE_DIR}/external/)

MESSAGE("scSNV ${scsnv_SOURCE_DIR}/include/")
MESSAGE("scSNV ${scsnv_SOURCE_DIR}/external/")
add_subdirectory("src")
